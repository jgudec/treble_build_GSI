From e8f151d74df0626373e469e8bf7072b2c35a5e3d Mon Sep 17 00:00:00 2001
From: Pierre-Hugues Husson <phh@phh.me>
Date: Fri, 7 Jul 2023 09:31:34 +0100
Subject: [PATCH] Call Samsung's ISehSysInputDev to report screen state to
 touchscreen driver

Change-Id: I2cf5b3d5a7c8445b136ae1fe08cc81c03bb4a297
---
 services/core/Android.bp                      |  1 +
 .../server/display/LocalDisplayAdapter.java   | 32 +++++++++++++++++++
 2 files changed, 33 insertions(+)

diff --git a/services/core/Android.bp b/services/core/Android.bp
index 5e952c1709bb..3cec5f493aa1 100644
--- a/services/core/Android.bp
+++ b/services/core/Android.bp
@@ -175,6 +175,7 @@ java_library_static {
         "SurfaceFlingerProperties",
         "com.android.sysprop.watchdog",
         "faceunlock_framework",
+        "vendor.samsung.hardware.sysinput-V1.2-java", // HIDL
     ],
     javac_shard_size: 50,
 }
diff --git a/services/core/java/com/android/server/display/LocalDisplayAdapter.java b/services/core/java/com/android/server/display/LocalDisplayAdapter.java
index efb2cb7a3283..74028cd2df3d 100644
--- a/services/core/java/com/android/server/display/LocalDisplayAdapter.java
+++ b/services/core/java/com/android/server/display/LocalDisplayAdapter.java
@@ -55,6 +55,9 @@ import java.util.Collections;
 import java.util.List;
 import java.util.Objects;
 
+import vendor.samsung.hardware.sysinput.V1_1.ISehSysInputDev;
+import android.util.Log;
+
 /**
  * A display adapter for the local displays managed by SurfaceFlinger.
  * <p>
@@ -227,6 +230,9 @@ final class LocalDisplayAdapter extends DisplayAdapter {
         private DisplayEventReceiver.FrameRateOverride[] mFrameRateOverrides =
                 new DisplayEventReceiver.FrameRateOverride[0];
 
+        private boolean triedSamsungHal = false;
+        private ISehSysInputDev samsungSysinput = null;
+
         LocalDisplayDevice(IBinder displayToken, long physicalDisplayId,
                 SurfaceControl.StaticDisplayInfo staticDisplayInfo,
                 SurfaceControl.DynamicDisplayInfo dynamicInfo,
@@ -812,16 +818,42 @@ final class LocalDisplayAdapter extends DisplayAdapter {
                             }
                             mSidekickActive = false;
                         }
+                        if (!triedSamsungHal) {
+                            triedSamsungHal = true;
+                            try {
+                                samsungSysinput = ISehSysInputDev.getService();
+                            } catch(Throwable t) {}
+                        }
                         final int mode = getPowerModeForState(state);
                         Trace.traceBegin(Trace.TRACE_TAG_POWER, "setDisplayState("
                                 + "id=" + physicalDisplayId
                                 + ", state=" + Display.stateToString(state) + ")");
+                        
+                        if (samsungSysinput != null) {
+                            try {
+                                Log.d("PHH", "setTspEnable 1, " + state + ", true");
+                                samsungSysinput.setTspEnable(1, state, true);
+                            } catch(Throwable t) {
+                                Log.d("PHH", "Failed settings tsp enable", t);
+                            }
+                        }
+                        
                         try {
                             mSurfaceControlProxy.setDisplayPowerMode(token, mode);
                             Trace.traceCounter(Trace.TRACE_TAG_POWER, "DisplayPowerMode", mode);
                         } finally {
                             Trace.traceEnd(Trace.TRACE_TAG_POWER);
                         }
+
+                        if (samsungSysinput != null) {
+                            try {
+                                Log.d("PHH", "setTspEnable 1, " + state + ", false");
+                                samsungSysinput.setTspEnable(1, state, false);
+                            } catch(Throwable t) {
+                                Log.d("PHH", "Failed settings tsp enable", t);
+                            }
+                        }
+
                         // If we're entering a suspended (but not OFF) power state and we
                         // have a sidekick available, tell it now that it can take control.
                         if (Display.isSuspendedState(state) && state != Display.STATE_OFF
-- 
2.17.1

